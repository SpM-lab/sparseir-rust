/**
 * @file sparseir_capi.h
 * @brief C API for SparseIR library (Auto-generated by cbindgen)
 *
 * This header is automatically generated from Rust source code.
 * Do not modify this file manually - edit the Rust sources instead.
 */


#ifndef SPARSEIR_CAPI_H
#define SPARSEIR_CAPI_H

/* Generated with cbindgen:0.27.0 */

/* Warning: This file is autogenerated by cbindgen. Don't modify manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define SPIR_ORDER_ROW_MAJOR 0

#define SPIR_ORDER_COLUMN_MAJOR 1

#define SPIR_STATISTICS_BOSONIC 0

#define SPIR_STATISTICS_FERMIONIC 1

typedef struct Arc_SVEResult Arc_SVEResult;

/**
 * Internal basis type (not exposed to C)
 */
typedef struct BasisType BasisType;

/**
 * Internal enum to hold different function types
 */
typedef struct FuncsType FuncsType;

/**
 * Internal kernel type (not exposed to C)
 */
typedef struct KernelType KernelType;

/**
 * Internal enum to distinguish between different sampling types
 */
typedef struct SamplingType SamplingType;

/**
 * Error codes for C API (compatible with libsparseir)
 */
typedef int StatusCode;

/**
 * Opaque kernel type for C API (compatible with libsparseir)
 *
 * This is a tagged union that can hold either LogisticKernel or RegularizedBoseKernel.
 * The actual type is determined by which constructor was used.
 *
 * Note: Named `spir_kernel` to match libsparseir C++ API exactly.
 */
typedef struct spir_kernel {
    struct KernelType inner;
} spir_kernel;

/**
 * Opaque SVE result type for C API (compatible with libsparseir)
 *
 * Contains singular values and singular functions from SVE computation.
 *
 * Note: Named `spir_sve_result` to match libsparseir C++ API exactly.
 */
typedef struct spir_sve_result {
    struct Arc_SVEResult inner;
} spir_sve_result;

/**
 * Opaque basis type for C API (compatible with libsparseir)
 *
 * Represents a finite temperature basis (IR or DLR).
 *
 * Note: Named `spir_basis` to match libsparseir C++ API exactly.
 */
typedef struct spir_basis {
    struct BasisType inner;
} spir_basis;

/**
 * Opaque funcs type for C API (compatible with libsparseir)
 *
 * Wraps piecewise Legendre polynomial representations:
 * - PiecewiseLegendrePolyVector for u and v
 * - PiecewiseLegendreFTVector for uhat
 *
 * Note: Named `spir_funcs` to match libsparseir C++ API exactly.
 */
typedef struct spir_funcs {
    struct FuncsType inner;
    double beta;
} spir_funcs;

/**
 * Sampling type for C API (unified type for all domains)
 *
 * This wraps different sampling implementations:
 * - TauSampling (for tau-domain)
 * - MatsubaraSampling (for Matsubara frequencies, full range or positive-only)
 */
typedef struct spir_sampling {
    struct SamplingType inner;
} spir_sampling;

#define SPIR_COMPUTATION_SUCCESS 0

#define SPIR_GET_IMPL_FAILED -1

#define SPIR_INVALID_DIMENSION -2

#define SPIR_INPUT_DIMENSION_MISMATCH -3

#define SPIR_OUTPUT_DIMENSION_MISMATCH -4

#define SPIR_NOT_SUPPORTED -5

#define SPIR_INVALID_ARGUMENT -6

#define SPIR_INTERNAL_ERROR -7

#endif  /* SPARSEIR_CAPI_H */
